#!/usr/bin/env python3

import argparse
import instructions
import os
import sys


def print_pseudocode(args):
    """
    Print the pseudocode for a set of instructions, either to stdout or to a
    set of files in a specified directory.
    """

    import inspect

    # Which instructions do we want to print?
    if args.all:
        to_print = sorted(instructions.instructions.keys())
    else:
        to_print = args.instruction

    if args.output != '-':
        try:
            os.mkdir(args.output)
        except FileExistsError:
            # It's OK if the directory already exists
            pass

        sys.stdout.write("Writing to '%s':" % args.output)

    for opcode in to_print:
        if args.output == '-':
            out = sys.stdout
        else:
            sys.stdout.write(' %s' % opcode)
            out = open(os.path.join(args.output, '%s.py' % opcode), 'w')

        (f, encoding_name) = instructions.instructions[opcode]

        out.write('#\n# %s: encoding %s\n#\n' % (opcode, encoding_name))
        out.write('%s\n' % inspect.getsource(f))


def print_script(args):
    """
    Pretty-print a DIF instruction stream, including line numbers from the
    source file and a named interpretation of the positional operands.
    """

    import parsing

    filename = args.source
    if not os.path.isfile(filename):
        sys.stderr.write("Error: '%s' is not a file\n" % filename)
        sys.exit(1)

    out = sys.stdout if args.output == '-' else open(args.output, 'w')

    with open(filename, 'r') as f:
        line_number = 0

        for line in f:
            line_number += 1
            src = (filename, line_number)

            out.write('%6d  ' % line_number)
            out.write('%-16s' % line.rstrip())

            (opcode, operands) = parsing.parse(line, src)

            if opcode:
                (f, encoding_name) = instructions.instructions[opcode]
                encoding = instructions.encodings[encoding_name]
                named = parsing.decode(opcode, operands, encoding, src)

                out.write(', '.join(['%3s=%d' % (k, v) for (k, v) in named]))

            out.write('\n')


arg_parser = argparse.ArgumentParser(description='''Prints DIF instructions.

This tool can be used to print pseudocode for DIF instructions or textual DIF
representations of a DIF instruction stream.
''')

subparsers = arg_parser.add_subparsers(title='things we can print',
                                       help='what we want to pretty-print')

pseudocode = subparsers.add_parser('pseudocode')
pseudocode.add_argument('-a', '--all', action='store_true',
                        help='Print pseudocode for all instructions')
pseudocode.add_argument('-o', '--output', default='-',
                        help='Output directory for source files')
pseudocode.add_argument('instruction', nargs='*',
                        help='Instructions to print (if not --all)')
pseudocode.set_defaults(func=print_pseudocode)

script = subparsers.add_parser('script')
script.add_argument('-o', '--output', default='-', help='Output file')
script.add_argument('source', help='Script file to print')
script.set_defaults(func=print_script)

args = arg_parser.parse_args()
args.func(args)
